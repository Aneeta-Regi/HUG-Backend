wb = xlsx_package.workbook
wb.styles do |style|
  highlight_cell = style.add_style(bg_color: "1b3d6e", b: true, sz: 18, fg_color: 'ffffff')
  bold_text = style.add_style(b: true, sz: 14, alignment: { wrap_text: true, :horizontal => :right})
  data_text = style.add_style(sz: 13, :alignment=>{:horizontal => :right, wrap_text: true})
  averages_line = style.add_style(bg_color: "00b2e2", b: true, fg_color: 'ffffff', sz: 16)
  thirdgraders_second_dra_line = style.add_style(bg_color: "eeeeee", sz: 11)

wb.add_worksheet(name: 'Districts') do |sheet|
  # lets brand this thing
  img = File.expand_path(Rails.root+'app/assets/images/HUG_logo.png')
  sheet.add_image(:image_src => img) do |image|
    image.width = 175
    image.height = 73
    image.start_at 5, 0
  end
  sheet.add_row
  # for each district in the system we generate a group of reports for schools
  @districts.each do |district|
    day = DateTime.now.to_date.strftime("%m-%d-%Y")
    sheet.add_row [nil,'District', 'State', 'Date', 'Report Generated by']
    author = :xlsx_author
    sheet.add_row [nil,district.name, district.state, day, author]
    # each school in the system
    district.schools.each do |school|
      # setup a few variables we will need later and zeroing them out from before.
      @sec_dont_count_me = 0
      @sec_dcm_fall_dra = 0
      @sec_dcm_win_dra = 0
      @sec_ato = 0
      @sec_att = 0
      @sec_tfdra = 0.0
      @sec_win_dra_total = 0.0
      @sec_sem_imp = 0
      @sec_win_dra = 0
      @sem_improv_total = 0.0
    # third grade variables
      @trd_dont_count_me = 0
      @trd_dcm_fall_dra = 0
      @trd_dcm_win_dra = 0
      @trd_ato = 0
      @trd_att = 0
      @trd_tfdra = 0.0
      @trd_win_dra_total = 0.0
      @trd_sem_imp = 0
      @trd_win_dra = 0
      @trd_sem_improv_total = 0.0
      # School title row
      sheet.add_row [school.school_name, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil], style: highlight_cell
      # student header row
      sheet.add_row ['H.U.G. ID', 'Name', 'Grade', 'Other Interventions', 'Tutor Name', 'H.U.G. 1st Attempt Average', 'H.U.G. 2nd Attempt Average', 'H.U.G. Gain', 'Last Years DRA Gains', 'Fall DRA', 'Winter DRA', 'Mid-Year Gain', 'Spring DRA', 'End of Year Gain' ], style: bold_text
      # get the list of students
      @students = Student.where(school_id: school.id, active: true).order(:grade, :first_name)
      # divide the students into grades
      @secondGrade = @students.select {|s| s.grade == '2nd'}
      @thirdGrade = @students.select {|s| s.grade == '3rd'}
      # second graders go first
      @secondGrade.each do |student|
        # check if the student has an average set up
        if student.average.nil?
          @sec_dont_count_me += 1
          acumen_one = 0
          acumen_two = 0
        else
          acumen_one = (100 - student.average.acumen_one).round(2)
          acumen_two = (100 - student.average.acumen_two).round(2)
        end
        # find the current year or grade level dra record
        dra_record = DraRecord.where(student_id: student.id, grade: student.grade)
        # if we dont have a dra record then we will set dra scores to 0 and increment the don't count me number
        if dra_record[0].nil?
          @sec_fall_dra = 0
          @sec_win_dra = 0
          @sec_dcm_fall_dra += 1
          @sec_dcm_win_dra += 1
        else
          # now we need to check that there is a dra score in the dra record
          if dra_record[0].fall_dra.nil?
            @sec_fall_dra = 0
            @sec_dcm_fall_dra += 1
          else
            @sec_fall_dra = dra_record[0].fall_dra
          end
          if dra_record[0].winter_dra.nil?
            @sec_win_dra = 0
            @sec_dcm_win_dra += 1
          else
            @sec_win_dra = dra_record[0].winter_dra
          end
        end
        # keep track of the total fall dra, and acumen scores
        @sec_tfdra = @sec_tfdra + @sec_fall_dra
        @sec_win_dra_total = @sec_win_dra_total + @sec_win_dra
        @sec_ato = @sec_ato + acumen_one
        @sec_att = @sec_att + acumen_two
        improvement = (acumen_two - acumen_one).round(2)
        @sec_win_dra.zero? ?  sem_improvement = 0 : sem_improvement = @sec_win_dra - @sec_fall_dra
        @sem_improv_total = @sem_improv_total + sem_improvement
        student_name = student.first_name + ' ' + student.s_last_name.to_s
        # now that we have all the students scores we can add them to the sheet
        sheet.add_row [student.id, student_name, student.grade, student.num_other_programs, student.vol_name, acumen_one, acumen_two, improvement, nil, @sec_fall_dra, @sec_win_dra, sem_improvement], style: data_text
      end
      # secondGrade averages go here
      # we need to do the math here because the add row tries to send the formula over to excel

      (@secondGrade.size - @sec_dont_count_me).zero? ? second_average_one = 0 : second_average_one =  (@sec_ato / (@secondGrade.size - @sec_dont_count_me)).round(2)
      (@secondGrade.size - @sec_dont_count_me).zero? ? second_average_two = 0 : second_average_two = (@sec_att / (@secondGrade.size - @sec_dont_count_me)).round(2)
      second_average_improvement = (second_average_two - second_average_one).round(2)
      sec_sem_imp_average = (@sem_improv_total / (@secondGrade.size - @sec_dcm_win_dra)).round(2)
      @secondGrade.size - @sec_dcm_fall_dra == 0 ? average_fall_dra = 0 : average_fall_dra = (@sec_tfdra / (@secondGrade.size - @sec_dcm_fall_dra)).round(2)
      @secondGrade.size - @sec_dcm_win_dra == 0 ? average_win_dra = 0 : average_win_dra = (@sec_win_dra_total / (@secondGrade.size - @sec_dcm_win_dra)).round(2)
      num_students = 'Total 2nd Graders ' + @secondGrade.size.to_s
      sheet.add_row [num_students, nil, nil, nil, '--Averages', second_average_one, second_average_two,
                     second_average_improvement, nil, average_fall_dra, average_win_dra, sec_sem_imp_average, nil, nil], style: averages_line

      #third graders go here
      @thirdGrade.each do |student|
        # check if the student has an average set up
        if student.average.nil?
          @trd_dont_count_me += 1
          acumen_one = 0
          acumen_two = 0
        else
          acumen_one = (100 - student.average.acumen_one).round(2)
          acumen_two = (100 - student.average.acumen_two).round(2)
        end
        # find the current year or grade level dra record
        dra_record = DraRecord.where(student_id: student.id, grade: student.grade)
        # if we dont have a dra record then we will set dra scores to 0 and increment the don't count me number
        if dra_record[0].nil?
          @trd_fall_dra = 0
          @trd_win_dra = 0
          @trd_dcm_fall_dra += 1
          @trd_dcm_win_dra += 1
        else
          # now we need to check that there is a dra score in the dra record
          if dra_record[0].fall_dra.nil?
            @trd_fall_dra = 0
            @trd_dcm_fall_dra += 1
          else
            @trd_fall_dra = dra_record[0].fall_dra
          end
          if dra_record[0].winter_dra.nil?
            @trd_win_dra = 0
            @trd_dcm_win_dra += 1
          else
            @trd_win_dra = dra_record[0].winter_dra
          end
        end
        # keep track of the total fall dra, and acumen scores
        @trd_tfdra = @trd_tfdra + @trd_fall_dra
        @trd_win_dra_total = @trd_win_dra_total + @trd_win_dra
        @trd_ato = @trd_ato + acumen_one
        @trd_att = @trd_att + acumen_two
        improvement = (acumen_two - acumen_one).round(2)
        @trd_win_dra.zero? ?  sem_improvement = 0 : sem_improvement = @trd_win_dra - @trd_fall_dra
        @trd_sem_improv_total = @trd_sem_improv_total + sem_improvement
        student_name = student.first_name + ' ' + student.s_last_name.to_s
        # last years crap
        dra_record_second = DraRecord.where(student_id: student.id, grade: '2nd')
        unless dra_record_second[0].nil?
          if dra_record_second[0].fall_dra.nil? || dra_record_second[0].winter_dra.nil?
            sem_improvement_second = 0
          else
            sem_improvement_second = dra_record_second[0].winter_dra - dra_record_second[0].fall_dra
          end
          if dra_record_second[0].fall_dra.nil? || dra_record_second[0].spring_dra.nil?
            end_improvement_second = 0
          else
            end_improvement_second = dra_record_second[0].spring_dra - dra_record_second[0].fall_dra
          end
        end
        dra_record_second[0].nil? ? last_years_gains = nil : last_years_gains = 'Mid ' + sem_improvement_second.to_s + ' / ' + 'End ' + end_improvement_second.to_s
        # now that we have all the students scores we can add them to the sheet
        sheet.add_row [student.id, student_name, student.grade, student.num_other_programs, student.vol_name, acumen_one, acumen_two, improvement, last_years_gains, @trd_fall_dra, @trd_win_dra, sem_improvement], style: data_text
      end
    # check if they have a second grade set of scores.
    # thirdGrade averages go here
    # we need to do the math here because the add row tries to send the formula over to excel
      (@thirdGrade.size - @trd_dont_count_me).zero? ? second_average_one = 0 : second_average_one =  (@trd_ato / (@thirdGrade.size - @trd_dont_count_me)).round(2)
      (@thirdGrade.size - @trd_dont_count_me).zero? ? second_average_two = 0 : second_average_two =  (@trd_att / (@thirdGrade.size - @trd_dont_count_me)).round(2)
      second_average_improvement = (second_average_two - second_average_one).round(2)
      (@thirdGrade.size - @trd_dcm_win_dra).zero? ? trd_sem_imp_average = 0 : trd_sem_imp_average = (@trd_sem_improv_total / (@thirdGrade.size - @trd_dcm_win_dra)).round(2)
      @thirdGrade.size - @trd_dcm_fall_dra == 0 ? average_fall_dra = 0 : average_fall_dra = (@trd_tfdra / (@thirdGrade.size - @trd_dcm_fall_dra)).round(2)
      @thirdGrade.size - @trd_dcm_win_dra == 0 ? average_win_dra = 0 : average_win_dra = (@trd_win_dra_total / (@thirdGrade.size - @trd_dcm_win_dra)).round(2)
      num_students = 'Total 3rd Graders ' + @thirdGrade.size.to_s
      sheet.add_row [num_students, nil, nil, nil, '--Averages', second_average_one, second_average_two,
                     second_average_improvement, nil, average_fall_dra, average_win_dra, trd_sem_imp_average, nil, nil], style: averages_line
      sheet.add_row
    end
  end
 end
end
